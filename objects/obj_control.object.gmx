<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar client_win;
client_win = 0;
globalvar selected_client;
globalvar grid_selected;
globalvar grid_clioked;
globalvar grid_selected_id;
globalvar clients_on_grid;
globalvar clients_on_grid_num;
clients_on_grid_num = 0;
grid_clioked = 0;
grid_selected = -1;
selected_client = 0;
globalvar grid_choose_option;
globalvar menu_shop;
menu_shop = 0;
grid_choose_option = 0;

minutes = 60;
dayLength = minutes * 1;
dayTimer = dayLength;
showDayTimer = ceil(dayTimer);
debug_dayTimeTxt = string(showDayTimer);

rating_num = 0;


weekDay[0] = "MON";
weekDay[1] = "TUE";
weekDay[2] = "WED";
weekDay[3] = "THU";
weekDay[4] = "FRI";
weekDay[5] = "SAT";
weekDay[6] = "SUN";

months[0] = "JAN";
months[1] = "FEB";
months[2] = "MAR";
months[3] = "APR";
months[4] = "MAY";
months[5] = "JUN";
months[6] = "JUL";
months[7] = "AUG";
months[8] = "SEP";
months[9] = "OCT";
months[10] = "NOV";
months[11] = "DEC";

globalvar money;
money = 200;
globalvar rating;
rating = 0;
globalvar rent;
rent = 800;
day_num = 0;
month_num = 0;
week_num = 1;

month_txt = months[month_num];
week_txt = "WEEK " + string(week_num);
day_txt = weekDay[day_num];
rent_txt = "RENT";
rating_txt = "RATING";
globalvar grid_num;
grid_num = 0;

for(var i = 0; i &lt; 20; i++){
    gymGrid_arr[i] = 0;
}
gymGrid_arr[0] = 1;
gymGrid_arr[1] = 1;
gymGrid_arr[2] = 2;
gymGrid_arr[3] = 3;
gymGrid_arr[4] = 4;

globalvar equipment_price;
equipment_price[0] = 250;
equipment_price[1] = 150;
equipment_price[2] = 150;
equipment_price[3] = 100;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DAYTIME TIMER
if(dayTimer &gt; 0){
    dayTimer = dayTimer - delta_time/1000000; // in seconds
} else {

    dayTimer = dayLength;
    day_num += 1;
    if(day_num &gt; 6)
    {
        day_num = 0;
        week_num += 1;
        
        if(week_num &gt; 4)
        {
            week_num = 1;
            month_num += 1;
            
            if(month_num &gt; 11)
            {
                month_num = 0;
                year_count += 1;
            }   
            month_txt = months[month_num];
            
        }
        week_txt = "WEEK " + string(week_num);
    }
    day_txt = weekDay[day_num];
    
}

showDayTimer = ceil(dayTimer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//UI TOP BAR
draw_set_font(UI_font);
    // 1ST LINE
var ui_top_y = 10;
var month_x = 10;
var week_x = 120;
var day_x = 300;

draw_text(month_x, ui_top_y, month_txt);
draw_text(week_x, ui_top_y, week_txt);
draw_text(day_x, ui_top_y, day_txt);


    //2ND LINE
var ui_2nd_y = 65;
var rent_x = 10;
var rating_x = 300;

draw_text(rent_x, ui_2nd_y, rent_txt);
draw_text(rating_x, ui_2nd_y, rating_txt);

    
//DRAW LOADING BARS

    //DAYTIMER
ui_daytime_x = day_x + 120;
ui_daytime_y = ui_top_y + 5;
draw_sprite(sprite48_UI_loadbar_bg, 1, ui_daytime_x, ui_daytime_y);
draw_sprite_ext(sprite47_UI_loadbar_fill, 1, ui_daytime_x, ui_daytime_y, showDayTimer/dayLength, 1, 0, c_white, 1);

    //RENT
ui_bars_y = ui_2nd_y + 5;

ui_rent_x = rent_x + 100;
ui_rent_scaleSize = 0.8;

if(money &gt; rent)
    ui_rent_scale = ui_rent_scaleSize;
else
    ui_rent_scale = ui_rent_scaleSize *(money/rent);
    
draw_sprite_ext(sprite48_UI_loadbar_bg, 1, ui_rent_x, ui_bars_y, ui_rent_scaleSize, 1, 0, c_white, 1);
draw_sprite_ext(sprite47_UI_loadbar_fill, 1, ui_rent_x, ui_bars_y, ui_rent_scale, 1, 0, c_white, 1);

    //RATING
ui_rating_x = rating_x + 140;
ui_rating_scaleSize = 0.9;

if(rating &gt; 100)
    ui_rate_barScale = ui_rating_scaleSize;
else
    ui_rate_barScale = ui_rating_scaleSize *(rating/100);

draw_sprite_ext(sprite48_UI_loadbar_bg, 1, ui_rating_x, ui_bars_y, ui_rating_scaleSize, 1, 0, c_white, 1);
draw_sprite_ext(sprite47_UI_loadbar_fill, 1, ui_rating_x, ui_bars_y, ui_rate_barScale, 1, 0, c_white, 1);

    
    
    
//DRAW GYM GRID-------------------------------------
equipment[0] = sprite53_ICONS_equipment_add;
equipment[1] = sprite34_ICONS_cardio_treadmill;
equipment[2] = sprite33_ICONS_chest_bench;
equipment[3] = sprite26_ICONS_legs_deadlift;
equipment[4] = sprite35_ICONS_arms_dumbbells;

globalvar grid;
for (var i = 0; i &lt; instance_number(obj_GridPiece); i += 1){
    grid[i] = instance_find(obj_GridPiece,i);
}

//move into a 2d grid array &amp; rearrange grid pieces in proper order
var b = 0;
globalvar grid2d;
var grid_w = 153;
var grid_y = 140;
for(var i = 0; i &lt; 5; i++){
    for(var a = 0; a &lt; 4; a++){
        grid2d[i, a] = grid[b];
        grid2d[i, a].x = (a * grid_w)-1;
        grid2d[i, a].y = 228 +(i * grid_y);
        grid2d[i, a].num = b;        
        b++;
    }   
}



globalvar first;
first = 0;
globalvar gymGrid_arr;
for (var i = 0; i &lt; instance_number(obj_GridPiece); i += 1){
    if(gymGrid_arr[i] == 0 &amp;&amp; first == 0){
        first = i;
        grid[first].upgrade = 1;
    } else if(gymGrid_arr[i] != 0){
        draw_sprite(equipment[gymGrid_arr[i]], 1, grid[i].x, grid[i].y);
    }
    
    //draw clients on grids being used 
    if(grid[i].used == 1)
    {
        clients_on_grid[grid[i].used_by].x = grid[i].x;
        clients_on_grid[grid[i].used_by].y = grid[i].y;
//        draw_sprite(spr_client_onGrid, 1, grid[i].x, grid[i].y);
    }
    draw_text(grid[i].x, grid[i].y, string(i));
}

draw_sprite(equipment[0], 1, grid[first].x, grid[first].y);
//------------------------------


//DRAW CLIENTS-----------------
c_waitingList_y = 180;
client_w = 50;
newClient_x = 5 - client_w;
for(var i = 0; i &lt; clientWaitingList; i++){
    WaitingLine_objs[i].x =  clientLine[i];
    WaitingLine_objs[i].y = c_waitingList_y;
}

//-----------------------------


//MENU WINDOWS

if(menu_shop == 1 &amp;&amp; client_win == 0){
    shop_menu(grid[first]);
    grid_choose_option = 0;
}
if(grid_choose_option==1 &amp;&amp; selected_client == 0 &amp;&amp; client_win == 0)
{
    grid_options(grid[first]);
//    draw_sprite_ext(sprite18_UI_menu_screen , 1, 0, 0, 1.0, 1.0, 0, c_white, 0.50);
}

if(selected_client != 0 &amp;&amp; client_win == 0){
    move_client(grid_selected_id);
}

if(client_win == 1){
    draw_client_window()
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
